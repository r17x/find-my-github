{"version":3,"sources":["contexts/UserContext.js","contexts/RepositoryContext.js","components/Repository.js","components/User.js","components/Search.js","pages/Home.js","serviceWorker.js","index.js"],"names":["React","createContext","Consumer","Provider","UserProvider","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFetchUser","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","username","res","user","wrap","_context","prev","next","axios","get","concat","sent","data","setState","notFound","t0","response","status","stop","_x","apply","arguments","state","react_default","createElement","value","userNotFound","props","children","Component","RepositoryProvider","onFetchRepo","repos","length","RepositoryContext_Provider","repoNotFound","Repository","RepositoryContext_Consumer","map","repo","Fragment","key","id","href","html_url","name","stargazers_count","styles","avatar","borderRadius","fontWeight","marginTop","User","keys","src","avatar_url","alt","width","height","style","login","Search","_this2","_ref2","Row","Col","lg","xs","Input","placeholder","onKeyUp","e","target","Button","onClick","content","colLeft","display","alignItems","flexDirection","Home","Navbar","color","dark","Container","NavbarBrand","Nav","className","navbar","NavItem","NavLink","UserContext_UserProvider","RepositoryContext_RepositoryProvider","FormGroup","components_Search","md","components_User","components_Repository","Boolean","window","location","hostname","match","ReactDOM","render","pages_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe81c8b2.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nlet UserContext;\nconst { Consumer, Provider } = (UserContext = React.createContext());\n\nclass UserProvider extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      user: {},\n      notFound: false\n    };\n  }\n\n  onFetchUser = async username => {\n    try {\n      const res = await axios.get(`https://api.github.com/users/${username}`);\n      const user = await res.data;\n      this.setState({ user, notFound: false });\n    } catch (error) {\n      if (error.response.status === 404) {\n        this.setState({ notFound: true });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          user: this.state.user,\n          userNotFound: this.state.notFound,\n          onFetchUser: this.onFetchUser\n        }}>\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nexport { Consumer as UserConsumer, UserProvider, UserContext };\n","import React from \"react\";\nimport axios from \"axios\";\n\nlet RepositoryContext;\nconst { Provider, Consumer } = (RepositoryContext = React.createContext());\n\nclass RepositoryProvider extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      repos: [],\n      notFound: false\n    };\n  }\n\n  onFetchRepo = async username => {\n    try {\n      const res = await axios.get(\n        `https://api.github.com/users/${username}/repos`\n      );\n      const repos = await res.data;\n      if (repos.length) {\n        this.setState({ repos, notFound: false });\n      } else {\n        this.setState({ notFound: true });\n      }\n    } catch (error) {\n      if (error.response.status === 404) {\n        this.setState({ notFound: true });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          repos: this.state.repos,\n          repoNotFound: this.state.notFound,\n          onFetchRepo: this.onFetchRepo\n        }}>\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nexport {\n  Consumer as RepositoryConsumer,\n  RepositoryProvider,\n  RepositoryContext\n};\n","import React from \"react\";\nimport { RepositoryConsumer } from \"../contexts/RepositoryContext\";\n\nconst Repository = () => {\n  return (\n    <RepositoryConsumer>\n      {({ repos, repoNotFound }) => {\n        if (repoNotFound) {\n          return <h1>Repo Not Found</h1>;\n        } else {\n          if (repos.length) {\n            return repos.map(repo => (\n              <React.Fragment key={repo.id}>\n                <a href={repo.html_url}>\n                  <p>{repo.name}</p>\n                </a>\n                <p>&#9733; {repo.stargazers_count}</p>\n                <hr />\n              </React.Fragment>\n            ));\n          }\n        }\n      }}\n    </RepositoryConsumer>\n  );\n};\n\nexport default Repository;\n","import React from \"react\";\nimport { UserConsumer } from \"../contexts/UserContext\";\n\nconst User = () => (\n  <UserConsumer>\n    {({ user, userNotFound }) => {\n      if (userNotFound) {\n        return <h1>User Not Found</h1>;\n      } else {\n        if (Object.keys(user).length) {\n          return (\n            <React.Fragment>\n              <img\n                src={user.avatar_url}\n                alt=\"avatar\"\n                width=\"150px\"\n                height=\"150px\"\n                style={styles.avatar}\n              />\n              <h4 style={styles.name}>{user.name}</h4>\n              <p>@{user.login}</p>\n            </React.Fragment>\n          );\n        }\n      }\n    }}\n  </UserConsumer>\n);\n\nconst styles = {\n  avatar: {\n    borderRadius: \"100%\"\n  },\n  name: {\n    fontWeight: \"bold\",\n    marginTop: \"15px\"\n  }\n};\n\nexport default User;\n","import React from \"react\";\nimport { Input, Row, Col, Button } from \"reactstrap\";\n\nimport { UserConsumer } from \"../contexts/UserContext\";\nimport { RepositoryConsumer } from \"../contexts/RepositoryContext\";\n\nclass Search extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      username: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <UserConsumer>\n        {({ onFetchUser }) => (\n          <RepositoryConsumer>\n            {({ onFetchRepo }) => (\n              <Row>\n                <Col lg={10} xs={9}>\n                  <Input\n                    placeholder=\"Input your username\"\n                    onKeyUp={e => this.setState({ username: e.target.value })}\n                  />\n                </Col>\n                <Col lg={2} xs={3}>\n                  <Button\n                    onClick={() => {\n                      onFetchUser(this.state.username);\n                      onFetchRepo(this.state.username);\n                    }}>\n                    Find!\n                  </Button>\n                </Col>\n              </Row>\n            )}\n          </RepositoryConsumer>\n        )}\n      </UserConsumer>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  FormGroup,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nimport { UserProvider } from \"../contexts/UserContext\";\nimport { RepositoryProvider } from \"../contexts/RepositoryContext\";\n\nimport Repository from \"../components/Repository\";\nimport User from \"../components/User\";\nimport Search from \"../components/Search\";\n\nconst Home = () => {\n  return (\n    <div>\n      <Navbar color=\"dark\" dark>\n        <Container>\n          <NavbarBrand href=\"/\">FindMyGitHub</NavbarBrand>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"https://github.com/kevinhermawan/find-my-github\">\n                GitHub\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Container>\n      </Navbar>\n      <Container style={styles.content}>\n        <UserProvider>\n          <RepositoryProvider>\n            <FormGroup>\n              <Search />\n            </FormGroup>\n            <Row>\n              <Col lg=\"6\" md=\"12\" xs=\"12\" style={styles.colLeft}>\n                <User />\n              </Col>\n              <Col lg=\"6\" md=\"12\" xs=\"12\">\n                <Repository />\n              </Col>\n            </Row>\n          </RepositoryProvider>\n        </UserProvider>\n      </Container>\n    </div>\n  );\n};\n\nconst styles = {\n  content: {\n    marginTop: \"20px\"\n  },\n  colLeft: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  }\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./pages/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}